import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import {
  Shield,
  AlertTriangle,
  Bug,
  Scan,
  Target,
  TrendingUp,
  TrendingDown,
  Activity,
  Clock,
  CheckCircle,
  XCircle,
  AlertCircle,
  Settings,
  Database,
  Server,
  Globe,
  Lock,
  Unlock,
  RefreshCw,
  Download,
  Filter,
  Search,
  Eye,
  FileText,
  Calendar,
  Users
} from 'lucide-react';

interface Vulnerability {
  id: string;
  cveId?: string;
  title: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'informational';
  cvssScore: number;
  status: 'open' | 'in_progress' | 'resolved' | 'risk_accepted' | 'false_positive';
  category: 'network' | 'web_application' | 'system' | 'database' | 'configuration' | 'privilege_escalation';
  discoveredDate: Date;
  lastSeen: Date;
  affectedAssets: Asset[];
  remediation: string;
  effort: 'low' | 'medium' | 'high';
  assignedTo?: string;
  dueDate?: Date;
  tags: string[];
  references: string[];
  exploitAvailable: boolean;
  patchAvailable: boolean;
}

interface Asset {
  id: string;
  name: string;
  type: 'server' | 'workstation' | 'network_device' | 'database' | 'application' | 'cloud_service';
  ip: string;
  os?: string;
  criticality: 'critical' | 'high' | 'medium' | 'low';
  owner: string;
  environment: 'production' | 'staging' | 'development' | 'test';
}

interface ScanJob {
  id: string;
  name: string;
  type: 'vulnerability' | 'compliance' | 'configuration' | 'network_discovery';
  status: 'scheduled' | 'running' | 'completed' | 'failed' | 'cancelled';
  targets: string[];
  scanner: string;
  scheduledAt: Date;
  startedAt?: Date;
  completedAt?: Date;
  duration?: number;
  vulnerabilitiesFound: number;
  progress: number;
  nextRun?: Date;
}

interface VulnMetrics {
  totalVulnerabilities: number;
  criticalVulns: number;
  highVulns: number;
  mediumVulns: number;
  lowVulns: number;
  openVulns: number;
  resolvedVulns: number;
  averageResolutionTime: number;
  riskScore: number;
  assetsScanned: number;
  lastScanDate: Date;
}

interface RemediationPlan {
  id: string;
  title: string;
  description: string;
  vulnerabilities: string[];
  priority: 'critical' | 'high' | 'medium' | 'low';
  estimatedEffort: number;
  assignedTo: string;
  status: 'planned' | 'in_progress' | 'testing' | 'completed' | 'blocked';
  createdAt: Date;
  dueDate: Date;
  dependencies: string[];
  impact: string;
}

const VulnerabilityManagement: React.FC = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [assets, setAssets] = useState<Asset[]>([]);
  const [scanJobs, setScanJobs] = useState<ScanJob[]>([]);
  const [metrics, setMetrics] = useState<VulnMetrics | null>(null);
  const [remediationPlans, setRemediationPlans] = useState<RemediationPlan[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'vulnerabilities' | 'assets' | 'scans' | 'remediation'>('vulnerabilities');
  const [selectedVuln, setSelectedVuln] = useState<Vulnerability | null>(null);
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [filterCategory, setFilterCategory] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    loadVulnerabilityData();
  }, []);

  const loadVulnerabilityData = async () => {
    setLoading(true);
    
    // Mock data
    const mockAssets: Asset[] = [
      {
        id: 'asset-001',
        name: 'web-server-01',
        type: 'server',
        ip: '192.168.1.10',
        os: 'Ubuntu 20.04',
        criticality: 'critical',
        owner: 'IT Operations',
        environment: 'production'
      },
      {
        id: 'asset-002',
        name: 'db-server-01',
        type: 'database',
        ip: '192.168.1.20',
        os: 'CentOS 8',
        criticality: 'critical',
        owner: 'Database Team',
        environment: 'production'
      },
      {
        id: 'asset-003',
        name: 'workstation-dev-05',
        type: 'workstation',
        ip: '192.168.2.45',
        os: 'Windows 10',
        criticality: 'medium',
        owner: 'Development Team',
        environment: 'development'
      }
    ];

    const mockVulnerabilities: Vulnerability[] = [
      {
        id: 'vuln-001',
        cveId: 'CVE-2024-12345',
        title: 'Remote Code Execution in Apache HTTP Server',
        description: 'A critical remote code execution vulnerability exists in Apache HTTP Server versions 2.4.x prior to 2.4.54',
        severity: 'critical',
        cvssScore: 9.8,
        status: 'open',
        category: 'web_application',
        discoveredDate: new Date(Date.now() - 172800000), // 2 days ago
        lastSeen: new Date(Date.now() - 86400000), // 1 day ago
        affectedAssets: [mockAssets[0]],
        remediation: 'Update Apache HTTP Server to version 2.4.54 or later',
        effort: 'medium',
        assignedTo: 'IT Operations',
        dueDate: new Date(Date.now() + 259200000), // 3 days from now
        tags: ['RCE', 'Apache', 'Web Server'],
        references: ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-12345'],
        exploitAvailable: true,
        patchAvailable: true
      },
      {
        id: 'vuln-002',
        cveId: 'CVE-2024-11111',
        title: 'SQL Injection in Database Application',
        description: 'SQL injection vulnerability allows unauthorized database access',
        severity: 'high',
        cvssScore: 8.1,
        status: 'in_progress',
        category: 'database',
        discoveredDate: new Date(Date.now() - 432000000), // 5 days ago
        lastSeen: new Date(Date.now() - 172800000), // 2 days ago
        affectedAssets: [mockAssets[1]],
        remediation: 'Implement parameterized queries and input validation',
        effort: 'high',
        assignedTo: 'Database Team',
        dueDate: new Date(Date.now() + 604800000), // 7 days from now
        tags: ['SQL Injection', 'Database', 'Input Validation'],
        references: ['https://owasp.org/www-community/attacks/SQL_Injection'],
        exploitAvailable: false,
        patchAvailable: false
      },
      {
        id: 'vuln-003',
        title: 'Outdated Operating System Components',
        description: 'Multiple outdated system components with known security vulnerabilities',
        severity: 'medium',
        cvssScore: 6.5,
        status: 'resolved',
        category: 'system',
        discoveredDate: new Date(Date.now() - 1209600000), // 14 days ago
        lastSeen: new Date(Date.now() - 604800000), // 7 days ago
        affectedAssets: [mockAssets[2]],
        remediation: 'Apply latest security patches and updates',
        effort: 'low',
        assignedTo: 'IT Operations',
        tags: ['Patching', 'System Updates', 'OS'],
        references: [],
        exploitAvailable: false,
        patchAvailable: true
      }
    ];

    const mockScanJobs: ScanJob[] = [
      {
        id: 'scan-001',
        name: 'Weekly Production Network Scan',
        type: 'vulnerability',
        status: 'completed',
        targets: ['192.168.1.0/24'],
        scanner: 'Nessus',
        scheduledAt: new Date(Date.now() - 86400000), // 1 day ago
        startedAt: new Date(Date.now() - 84600000),
        completedAt: new Date(Date.now() - 82800000),
        duration: 30,
        vulnerabilitiesFound: 47,
        progress: 100,
        nextRun: new Date(Date.now() + 518400000) // 6 days from now
      },
      {
        id: 'scan-002',
        name: 'Web Application Security Scan',
        type: 'vulnerability',
        status: 'running',
        targets: ['https://webapp.company.com'],
        scanner: 'OWASP ZAP',
        scheduledAt: new Date(Date.now() - 3600000),
        startedAt: new Date(Date.now() - 3600000),
        duration: 0,
        vulnerabilitiesFound: 0,
        progress: 65,
        nextRun: new Date(Date.now() + 86400000) // 1 day from now
      },
      {
        id: 'scan-003',
        name: 'Compliance Configuration Check',
        type: 'compliance',
        status: 'scheduled',
        targets: ['All Production Servers'],
        scanner: 'Nessus',
        scheduledAt: new Date(Date.now() + 7200000), // 2 hours from now
        duration: 0,
        vulnerabilitiesFound: 0,
        progress: 0
      }
    ];

    const mockRemediationPlans: RemediationPlan[] = [
      {
        id: 'plan-001',
        title: 'Critical Web Server Vulnerabilities',
        description: 'Address critical vulnerabilities in web server infrastructure',
        vulnerabilities: ['vuln-001'],
        priority: 'critical',
        estimatedEffort: 16,
        assignedTo: 'IT Operations',
        status: 'in_progress',
        createdAt: new Date(Date.now() - 86400000),
        dueDate: new Date(Date.now() + 172800000),
        dependencies: ['Change Management Approval'],
        impact: 'Service downtime during patching window'
      },
      {
        id: 'plan-002',
        title: 'Database Security Hardening',
        description: 'Comprehensive database security improvements',
        vulnerabilities: ['vuln-002'],
        priority: 'high',
        estimatedEffort: 40,
        assignedTo: 'Database Team',
        status: 'planned',
        createdAt: new Date(Date.now() - 172800000),
        dueDate: new Date(Date.now() + 604800000),
        dependencies: ['Code Review', 'Testing Environment Setup'],
        impact: 'Application modifications required'
      }
    ];

    const mockMetrics: VulnMetrics = {
      totalVulnerabilities: 156,
      criticalVulns: 12,
      highVulns: 34,
      mediumVulns: 67,
      lowVulns: 43,
      openVulns: 89,
      resolvedVulns: 67,
      averageResolutionTime: 8.5,
      riskScore: 7.2,
      assetsScanned: 245,
      lastScanDate: new Date(Date.now() - 86400000)
    };

    setAssets(mockAssets);
    setVulnerabilities(mockVulnerabilities);
    setScanJobs(mockScanJobs);
    setRemediationPlans(mockRemediationPlans);
    setMetrics(mockMetrics);
    setLoading(false);
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSeverity = filterSeverity === 'all' || vuln.severity === filterSeverity;
    const matchesStatus = filterStatus === 'all' || vuln.status === filterStatus;
    const matchesCategory = filterCategory === 'all' || vuln.category === filterCategory;
    const matchesSearch = searchTerm === '' || 
      vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.cveId?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    
    return matchesSeverity && matchesStatus && matchesCategory && matchesSearch;
  });

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'cads-severity-critical';
      case 'high': return 'cads-severity-high';
      case 'medium': return 'cads-severity-medium';
      case 'low': return 'cads-severity-low';
      case 'informational': return 'cads-severity-info';
      default: return 'cads-severity-low';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'cads-vuln-status-open';
      case 'in_progress': return 'cads-vuln-status-progress';
      case 'resolved': return 'cads-vuln-status-resolved';
      case 'risk_accepted': return 'cads-vuln-status-accepted';
      case 'false_positive': return 'cads-vuln-status-false';
      default: return 'cads-vuln-status-open';
    }
  };

  const getScanStatusColor = (status: string) => {
    switch (status) {
      case 'scheduled': return 'cads-scan-scheduled';
      case 'running': return 'cads-scan-running';
      case 'completed': return 'cads-scan-completed';
      case 'failed': return 'cads-scan-failed';
      case 'cancelled': return 'cads-scan-cancelled';
      default: return 'cads-scan-scheduled';
    }
  };

  const getCriticalityColor = (criticality: string) => {
    switch (criticality) {
      case 'critical': return 'cads-asset-critical';
      case 'high': return 'cads-asset-high';
      case 'medium': return 'cads-asset-medium';
      case 'low': return 'cads-asset-low';
      default: return 'cads-asset-low';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'cads-priority-critical';
      case 'high': return 'cads-priority-high';
      case 'medium': return 'cads-priority-medium';
      case 'low': return 'cads-priority-low';
      default: return 'cads-priority-low';
    }
  };

  if (loading) {
    return (
      <div className="cads-loading">
        <div className="cads-loading-spinner"></div>
        <p>Loading vulnerability data...</p>
      </div>
    );
  }

  return (
    <div className="cads-vulnerability-management">
      {/* Header */}
      <div className="cads-section-header">
        <div className="cads-header-content">
          <div className="cads-header-info">
            <h2 className="cads-section-title">
              <Bug className="cads-icon" />
              Vulnerability Management
            </h2>
            <p className="cads-section-description">
              Identify, assess, and remediate security vulnerabilities
            </p>
          </div>
          <div className="cads-header-controls">
            <button 
              onClick={loadVulnerabilityData} 
              className="cads-btn cads-btn-secondary"
              aria-label="Refresh vulnerability data"
            >
              <RefreshCw size={16} />
              Refresh
            </button>
            <button className="cads-btn cads-btn-primary">
              <Scan size={16} />
              New Scan
            </button>
          </div>
        </div>
      </div>

      {/* Metrics Overview */}
      {metrics && (
        <div className="cads-vuln-metrics">
          <motion.div 
            className="cads-metric-card cads-metric-critical"
            whileHover={{ scale: 1.02 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
          >
            <div className="cads-metric-icon">
              <AlertTriangle size={24} />
            </div>
            <div className="cads-metric-content">
              <div className="cads-metric-value">{metrics.criticalVulns}</div>
              <div className="cads-metric-label">Critical</div>
            </div>
          </motion.div>

          <motion.div 
            className="cads-metric-card cads-metric-high"
            whileHover={{ scale: 1.02 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
          >
            <div className="cads-metric-icon">
              <AlertCircle size={24} />
            </div>
            <div className="cads-metric-content">
              <div className="cads-metric-value">{metrics.highVulns}</div>
              <div className="cads-metric-label">High</div>
            </div>
          </motion.div>

          <motion.div 
            className="cads-metric-card cads-metric-warning"
            whileHover={{ scale: 1.02 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            <div className="cads-metric-icon">
              <Activity size={24} />
            </div>
            <div className="cads-metric-content">
              <div className="cads-metric-value">{metrics.openVulns}</div>
              <div className="cads-metric-label">Open</div>
            </div>
          </motion.div>

          <motion.div 
            className="cads-metric-card cads-metric-success"
            whileHover={{ scale: 1.02 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
          >
            <div className="cads-metric-icon">
              <CheckCircle size={24} />
            </div>
            <div className="cads-metric-content">
              <div className="cads-metric-value">{metrics.resolvedVulns}</div>
              <div className="cads-metric-label">Resolved</div>
            </div>
          </motion.div>

          <motion.div 
            className="cads-metric-card cads-metric-info"
            whileHover={{ scale: 1.02 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
          >
            <div className="cads-metric-icon">
              <TrendingUp size={24} />
            </div>
            <div className="cads-metric-content">
              <div className="cads-metric-value">{metrics.riskScore.toFixed(1)}</div>
              <div className="cads-metric-label">Risk Score</div>
            </div>
          </motion.div>
        </div>
      )}

      {/* Tab Navigation */}
      <div className="cads-tab-navigation">
        <button
          className={`cads-tab ${activeTab === 'vulnerabilities' ? 'cads-tab-active' : ''}`}
          onClick={() => setActiveTab('vulnerabilities')}
        >
          <Bug size={16} />
          Vulnerabilities ({vulnerabilities.length})
        </button>
        <button
          className={`cads-tab ${activeTab === 'assets' ? 'cads-tab-active' : ''}`}
          onClick={() => setActiveTab('assets')}
        >
          <Server size={16} />
          Assets ({assets.length})
        </button>
        <button
          className={`cads-tab ${activeTab === 'scans' ? 'cads-tab-active' : ''}`}
          onClick={() => setActiveTab('scans')}
        >
          <Scan size={16} />
          Scans ({scanJobs.length})
        </button>
        <button
          className={`cads-tab ${activeTab === 'remediation' ? 'cads-tab-active' : ''}`}
          onClick={() => setActiveTab('remediation')}
        >
          <Target size={16} />
          Remediation ({remediationPlans.length})
        </button>
      </div>

      {/* Vulnerabilities Tab */}
      {activeTab === 'vulnerabilities' && (
        <div className="cads-vulnerabilities-section">
          {/* Filters */}
          <div className="cads-filters-section">
            <div className="cads-filter-group">
              <div className="cads-search-box">
                <Search size={16} className="cads-search-icon" />
                <input
                  type="text"
                  placeholder="Search vulnerabilities..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="cads-search-input"
                  aria-label="Search vulnerabilities"
                />
              </div>
              
              <select 
                value={filterSeverity} 
                onChange={(e) => setFilterSeverity(e.target.value)}
                className="cads-select"
                aria-label="Filter by severity"
              >
                <option value="all">All Severities</option>
                <option value="critical">Critical</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
                <option value="informational">Informational</option>
              </select>

              <select 
                value={filterStatus} 
                onChange={(e) => setFilterStatus(e.target.value)}
                className="cads-select"
                aria-label="Filter by status"
              >
                <option value="all">All Status</option>
                <option value="open">Open</option>
                <option value="in_progress">In Progress</option>
                <option value="resolved">Resolved</option>
                <option value="risk_accepted">Risk Accepted</option>
                <option value="false_positive">False Positive</option>
              </select>

              <select 
                value={filterCategory} 
                onChange={(e) => setFilterCategory(e.target.value)}
                className="cads-select"
                aria-label="Filter by category"
              >
                <option value="all">All Categories</option>
                <option value="network">Network</option>
                <option value="web_application">Web Application</option>
                <option value="system">System</option>
                <option value="database">Database</option>
                <option value="configuration">Configuration</option>
                <option value="privilege_escalation">Privilege Escalation</option>
              </select>

              <button 
                className="cads-btn cads-btn-secondary"
                aria-label="Export vulnerabilities"
              >
                <Download size={16} />
                Export
              </button>
            </div>
          </div>

          {/* Vulnerability List */}
          <div className="cads-vulnerabilities-list">
            {filteredVulnerabilities.map((vuln, index) => (
              <motion.div
                key={vuln.id}
                className="cads-vulnerability-card"
                whileHover={{ scale: 1.01, y: -2 }}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                onClick={() => setSelectedVuln(vuln)}
              >
                <div className="cads-vuln-header">
                  <div className={`cads-severity-badge ${getSeverityColor(vuln.severity)}`}>
                    {vuln.severity.toUpperCase()}
                  </div>
                  <div className={`cads-status-badge ${getStatusColor(vuln.status)}`}>
                    {vuln.status.replace('_', ' ').toUpperCase()}
                  </div>
                  <div className="cads-vuln-score">CVSS: {vuln.cvssScore}</div>
                  {vuln.cveId && (
                    <div className="cads-cve-id">{vuln.cveId}</div>
                  )}
                </div>

                <div className="cads-vuln-content">
                  <h3 className="cads-vuln-title">{vuln.title}</h3>
                  <p className="cads-vuln-description">{vuln.description}</p>
                  
                  <div className="cads-vuln-details">
                    <div className="cads-vuln-detail">
                      <span className="cads-label">Category:</span>
                      <span className="cads-value">{vuln.category.replace('_', ' ')}</span>
                    </div>
                    <div className="cads-vuln-detail">
                      <span className="cads-label">Discovered:</span>
                      <span className="cads-value">{vuln.discoveredDate.toLocaleDateString()}</span>
                    </div>
                    <div className="cads-vuln-detail">
                      <span className="cads-label">Assets:</span>
                      <span className="cads-value">{vuln.affectedAssets.length}</span>
                    </div>
                    {vuln.assignedTo && (
                      <div className="cads-vuln-detail">
                        <span className="cads-label">Assigned:</span>
                        <span className="cads-value">{vuln.assignedTo}</span>
                      </div>
                    )}
                  </div>

                  <div className="cads-vuln-indicators">
                    {vuln.exploitAvailable && (
                      <div className="cads-vuln-indicator cads-exploit-available">
                        <Target size={14} />
                        <span>Exploit Available</span>
                      </div>
                    )}
                    {vuln.patchAvailable && (
                      <div className="cads-vuln-indicator cads-patch-available">
                        <Shield size={14} />
                        <span>Patch Available</span>
                      </div>
                    )}
                  </div>

                  <div className="cads-vuln-tags">
                    {vuln.tags.slice(0, 3).map((tag, idx) => (
                      <span key={idx} className="cads-vuln-tag">
                        {tag}
                      </span>
                    ))}
                    {vuln.tags.length > 3 && (
                      <span className="cads-more-tags">
                        +{vuln.tags.length - 3} more
                      </span>
                    )}
                  </div>

                  <div className="cads-vuln-remediation">
                    <span className="cads-label">Remediation:</span>
                    <span className="cads-value">{vuln.remediation}</span>
                  </div>
                </div>

                {vuln.dueDate && (
                  <div className="cads-vuln-footer">
                    <Clock size={14} />
                    <span>Due: {vuln.dueDate.toLocaleDateString()}</span>
                  </div>
                )}
              </motion.div>
            ))}
          </div>

          {filteredVulnerabilities.length === 0 && (
            <div className="cads-empty-state">
              <Bug size={48} className="cads-empty-icon" />
              <h3>No vulnerabilities found</h3>
              <p>No vulnerabilities match your current filters.</p>
            </div>
          )}
        </div>
      )}

      {/* Assets Tab */}
      {activeTab === 'assets' && (
        <div className="cads-assets-section">
          <div className="cads-assets-grid">
            {assets.map((asset, index) => (
              <motion.div
                key={asset.id}
                className="cads-asset-card"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                whileHover={{ scale: 1.02 }}
              >
                <div className="cads-asset-header">
                  <div className="cads-asset-type">{asset.type.replace('_', ' ').toUpperCase()}</div>
                  <div className={`cads-criticality-badge ${getCriticalityColor(asset.criticality)}`}>
                    {asset.criticality.toUpperCase()}
                  </div>
                </div>

                <div className="cads-asset-content">
                  <h3 className="cads-asset-name">{asset.name}</h3>
                  
                  <div className="cads-asset-details">
                    <div className="cads-asset-detail">
                      <span className="cads-label">IP Address:</span>
                      <span className="cads-value">{asset.ip}</span>
                    </div>
                    {asset.os && (
                      <div className="cads-asset-detail">
                        <span className="cads-label">OS:</span>
                        <span className="cads-value">{asset.os}</span>
                      </div>
                    )}
                    <div className="cads-asset-detail">
                      <span className="cads-label">Owner:</span>
                      <span className="cads-value">{asset.owner}</span>
                    </div>
                    <div className="cads-asset-detail">
                      <span className="cads-label">Environment:</span>
                      <span className="cads-value">{asset.environment}</span>
                    </div>
                  </div>

                  <div className="cads-asset-vulns">
                    <div className="cads-asset-vuln-count">
                      <span className="cads-count">
                        {vulnerabilities.filter(v => v.affectedAssets.some(a => a.id === asset.id)).length}
                      </span>
                      <span className="cads-label">Vulnerabilities</span>
                    </div>
                  </div>
                </div>

                <div className="cads-asset-actions">
                  <button className="cads-btn cads-btn-secondary">
                    <Eye size={16} />
                    View Details
                  </button>
                  <button className="cads-btn cads-btn-primary">
                    <Scan size={16} />
                    Scan
                  </button>
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      )}

      {/* Scans Tab */}
      {activeTab === 'scans' && (
        <div className="cads-scans-section">
          <div className="cads-scans-list">
            {scanJobs.map((scan, index) => (
              <motion.div
                key={scan.id}
                className="cads-scan-card"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
              >
                <div className="cads-scan-header">
                  <h3 className="cads-scan-name">{scan.name}</h3>
                  <div className={`cads-scan-status ${getScanStatusColor(scan.status)}`}>
                    {scan.status.toUpperCase()}
                  </div>
                </div>

                <div className="cads-scan-content">
                  <div className="cads-scan-details">
                    <div className="cads-scan-detail">
                      <span className="cads-label">Type:</span>
                      <span className="cads-value">{scan.type.replace('_', ' ')}</span>
                    </div>
                    <div className="cads-scan-detail">
                      <span className="cads-label">Scanner:</span>
                      <span className="cads-value">{scan.scanner}</span>
                    </div>
                    <div className="cads-scan-detail">
                      <span className="cads-label">Targets:</span>
                      <span className="cads-value">{scan.targets.length}</span>
                    </div>
                    {scan.duration !== undefined && scan.duration > 0 && (
                      <div className="cads-scan-detail">
                        <span className="cads-label">Duration:</span>
                        <span className="cads-value">{scan.duration}min</span>
                      </div>
                    )}
                  </div>

                  {scan.status === 'running' && (
                    <div className="cads-scan-progress">
                      <div className="cads-progress-header">
                        <span>Progress</span>
                        <span>{scan.progress}%</span>
                      </div>
                      <div className="cads-progress-bar">
                        <div 
                          className="cads-progress-fill"
                          style={{ width: `${scan.progress}%` }}
                        ></div>
                      </div>
                    </div>
                  )}

                  {scan.status === 'completed' && (
                    <div className="cads-scan-results">
                      <div className="cads-result-item">
                        <Bug size={16} />
                        <span>{scan.vulnerabilitiesFound} vulnerabilities found</span>
                      </div>
                    </div>
                  )}

                  <div className="cads-scan-targets">
                    <span className="cads-label">Targets:</span>
                    {scan.targets.slice(0, 2).map((target, idx) => (
                      <span key={idx} className="cads-target-tag">
                        {target}
                      </span>
                    ))}
                    {scan.targets.length > 2 && (
                      <span className="cads-more-targets">
                        +{scan.targets.length - 2} more
                      </span>
                    )}
                  </div>
                </div>

                <div className="cads-scan-footer">
                  <div className="cads-scan-schedule">
                    <Calendar size={14} />
                    <span>Scheduled: {scan.scheduledAt.toLocaleString()}</span>
                  </div>
                  {scan.nextRun && (
                    <div className="cads-scan-next">
                      <Clock size={14} />
                      <span>Next: {scan.nextRun.toLocaleString()}</span>
                    </div>
                  )}
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      )}

      {/* Remediation Tab */}
      {activeTab === 'remediation' && (
        <div className="cads-remediation-section">
          <div className="cads-remediation-list">
            {remediationPlans.map((plan, index) => (
              <motion.div
                key={plan.id}
                className="cads-remediation-card"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                whileHover={{ scale: 1.01 }}
              >
                <div className="cads-remediation-header">
                  <h3 className="cads-remediation-title">{plan.title}</h3>
                  <div className={`cads-priority-badge ${getPriorityColor(plan.priority)}`}>
                    {plan.priority.toUpperCase()}
                  </div>
                  <div className="cads-remediation-status">{plan.status.replace('_', ' ').toUpperCase()}</div>
                </div>

                <div className="cads-remediation-content">
                  <p className="cads-remediation-description">{plan.description}</p>
                  
                  <div className="cads-remediation-details">
                    <div className="cads-remediation-detail">
                      <Users size={14} />
                      <span>Assigned: {plan.assignedTo}</span>
                    </div>
                    <div className="cads-remediation-detail">
                      <Clock size={14} />
                      <span>Effort: {plan.estimatedEffort}h</span>
                    </div>
                    <div className="cads-remediation-detail">
                      <Bug size={14} />
                      <span>Vulns: {plan.vulnerabilities.length}</span>
                    </div>
                    <div className="cads-remediation-detail">
                      <Calendar size={14} />
                      <span>Due: {plan.dueDate.toLocaleDateString()}</span>
                    </div>
                  </div>

                  {plan.dependencies.length > 0 && (
                    <div className="cads-remediation-dependencies">
                      <span className="cads-label">Dependencies:</span>
                      {plan.dependencies.map((dep, idx) => (
                        <span key={idx} className="cads-dependency-tag">
                          {dep}
                        </span>
                      ))}
                    </div>
                  )}

                  <div className="cads-remediation-impact">
                    <span className="cads-label">Impact:</span>
                    <span className="cads-value">{plan.impact}</span>
                  </div>
                </div>

                <div className="cads-remediation-actions">
                  <button className="cads-btn cads-btn-secondary">
                    <FileText size={16} />
                    View Plan
                  </button>
                  <button className="cads-btn cads-btn-primary">
                    Update Status
                  </button>
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      )}

      {/* Vulnerability Detail Modal */}
      {selectedVuln && (
        <motion.div
          className="cads-modal-overlay"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={() => setSelectedVuln(null)}
        >
          <motion.div
            className="cads-modal-content cads-vuln-detail-modal"
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            onClick={(e) => e.stopPropagation()}
          >
            <div className="cads-modal-header">
              <h3>Vulnerability Details - {selectedVuln.title}</h3>
              <button 
                onClick={() => setSelectedVuln(null)} 
                className="cads-modal-close"
                aria-label="Close vulnerability details"
              >
                ×
              </button>
            </div>

            <div className="cads-modal-body">
              <div className="cads-vuln-detail-content">
                <div className="cads-detail-section">
                  <h4>Vulnerability Information</h4>
                  <div className="cads-detail-row">
                    <span className="cads-label">ID:</span>
                    <span className="cads-value">{selectedVuln.id}</span>
                  </div>
                  {selectedVuln.cveId && (
                    <div className="cads-detail-row">
                      <span className="cads-label">CVE ID:</span>
                      <span className="cads-value">{selectedVuln.cveId}</span>
                    </div>
                  )}
                  <div className="cads-detail-row">
                    <span className="cads-label">Severity:</span>
                    <span className={`cads-value ${getSeverityColor(selectedVuln.severity)}`}>
                      {selectedVuln.severity.toUpperCase()}
                    </span>
                  </div>
                  <div className="cads-detail-row">
                    <span className="cads-label">CVSS Score:</span>
                    <span className="cads-value">{selectedVuln.cvssScore}</span>
                  </div>
                  <div className="cads-detail-row">
                    <span className="cads-label">Status:</span>
                    <span className={`cads-value ${getStatusColor(selectedVuln.status)}`}>
                      {selectedVuln.status.replace('_', ' ').toUpperCase()}
                    </span>
                  </div>
                </div>

                <div className="cads-detail-section">
                  <h4>Discovery Information</h4>
                  <div className="cads-detail-row">
                    <span className="cads-label">Category:</span>
                    <span className="cads-value">{selectedVuln.category.replace('_', ' ')}</span>
                  </div>
                  <div className="cads-detail-row">
                    <span className="cads-label">Discovered:</span>
                    <span className="cads-value">{selectedVuln.discoveredDate.toLocaleString()}</span>
                  </div>
                  <div className="cads-detail-row">
                    <span className="cads-label">Last Seen:</span>
                    <span className="cads-value">{selectedVuln.lastSeen.toLocaleString()}</span>
                  </div>
                  {selectedVuln.assignedTo && (
                    <div className="cads-detail-row">
                      <span className="cads-label">Assigned To:</span>
                      <span className="cads-value">{selectedVuln.assignedTo}</span>
                    </div>
                  )}
                </div>

                <div className="cads-detail-section cads-full-width">
                  <h4>Description</h4>
                  <p className="cads-description">{selectedVuln.description}</p>
                </div>

                <div className="cads-detail-section cads-full-width">
                  <h4>Remediation</h4>
                  <p className="cads-remediation">{selectedVuln.remediation}</p>
                  <div className="cads-remediation-effort">
                    <span className="cads-label">Effort:</span>
                    <span className="cads-value">{selectedVuln.effort}</span>
                  </div>
                </div>

                <div className="cads-detail-section cads-full-width">
                  <h4>Affected Assets</h4>
                  <div className="cads-affected-assets">
                    {selectedVuln.affectedAssets.map((asset, idx) => (
                      <div key={idx} className="cads-affected-asset">
                        <Server size={16} />
                        <span>{asset.name} ({asset.ip})</span>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="cads-detail-section cads-full-width">
                  <h4>Tags</h4>
                  <div className="cads-tags-list">
                    {selectedVuln.tags.map((tag, idx) => (
                      <span key={idx} className="cads-detail-tag">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>

                {selectedVuln.references.length > 0 && (
                  <div className="cads-detail-section cads-full-width">
                    <h4>References</h4>
                    <div className="cads-references-list">
                      {selectedVuln.references.map((ref, idx) => (
                        <a key={idx} href={ref} target="_blank" rel="noopener noreferrer" className="cads-reference-link">
                          {ref}
                        </a>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>

            <div className="cads-modal-footer">
              <button className="cads-btn cads-btn-secondary">
                Create Ticket
              </button>
              <button className="cads-btn cads-btn-warning">
                Accept Risk
              </button>
              <button className="cads-btn cads-btn-primary">
                Mark Resolved
              </button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </div>
  );
};

export default VulnerabilityManagement;

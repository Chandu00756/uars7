version: '3.8'

# UARS ADCF Development Environment
# Military-grade development stack with full observability

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: adcf-postgres
    environment:
      POSTGRES_DB: adcf
      POSTGRES_USER: adcf
      POSTGRES_PASSWORD: adcf_dev_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../schema.sql:/docker-entrypoint-initdb.d/001-schema.sql:ro
      - ./init-scripts/:/docker-entrypoint-initdb.d/:ro
    networks:
      - adcf-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adcf -d adcf"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: adcf-redis
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --requirepass redis_dev_password
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - adcf-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # ADCF Service
  adcf:
    build:
      context: ../
      dockerfile: dev/Dockerfile
      target: go-builder
    container_name: adcf-service
    ports:
      - "8080:8080"  # Main API
      - "9090:9090"  # Metrics
      - "8081:8081"  # P2P
      - "40000:40000" # Debugging
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: adcf
      DB_USER: adcf
      DB_PASSWORD: adcf_dev_password
      DB_SSLMODE: disable
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_dev_password
      
      # Development settings
      APP_ENV: development
      LOG_LEVEL: debug
      DEBUG_MODE: "true"
      
      # Crypto (development keys - NOT FOR PRODUCTION)
      ENCRYPTION_KEY_PRIMARY: "dev_primary_key_32_chars_long!!"
      ENCRYPTION_KEY_SECONDARY: "dev_secondary_key_32_chars!!"
      SIGNING_KEY_PRIVATE: "dev_signing_private_key"
      SIGNING_KEY_PUBLIC: "dev_signing_public_key"
      
      # JWT
      JWT_SECRET: "dev_jwt_secret_key"
      JWT_ISSUER: "uars-adcf-dev"
      JWT_AUDIENCE: "uars-platform-dev"
      
      # Monitoring
      JAEGER_ENDPOINT: "http://jaeger:14268/api/traces"
      METRICS_ENABLED: "true"
      TRACING_ENABLED: "true"
      
      # Policy Engine
      POLICY_ENGINE_WASM_PATH: "/app/wasm/policy-engine.wasm"
      POLICY_CACHE_TTL: "300"  # 5 minutes for dev
    volumes:
      - ../:/app/src:ro
      - dev_cache:/app/cache
      - dev_logs:/app/logs
    networks:
      - adcf-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/app/adcf", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: adcf-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    networks:
      - adcf-network
    security_opt:
      - no-new-privileges:true

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: adcf-prometheus
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - adcf-network
    security_opt:
      - no-new-privileges:true

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: adcf-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_SECURITY_COOKIE_SECURE: false
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - adcf-network
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true

  # OWASP ZAP for security testing
  zap:
    image: owasp/zap2docker-stable:2.14.0
    container_name: adcf-zap
    ports:
      - "8090:8080"
    command: zap-baseline.py -t http://adcf:8080 -r zap-report.html
    volumes:
      - zap_reports:/zap/wrk
    networks:
      - adcf-network
    depends_on:
      - adcf
    profiles:
      - security-testing

  # Load testing with k6
  k6:
    image: grafana/k6:0.46.0
    container_name: adcf-k6
    volumes:
      - ./k6-scripts:/scripts:ro
    environment:
      K6_OUT: influxdb=http://influxdb:8086/k6
    networks:
      - adcf-network
    depends_on:
      - adcf
    profiles:
      - load-testing

  # Database admin interface
  pgadmin:
    image: dpage/pgadmin4:7.8
    container_name: adcf-pgadmin
    ports:
      - "8082:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@uars.platform
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - adcf-network
    depends_on:
      - postgres
    profiles:
      - admin-tools

  # API documentation with Swagger UI
  swagger-ui:
    image: swaggerapi/swagger-ui:v5.6.2
    container_name: adcf-swagger
    ports:
      - "8083:8080"
    environment:
      SWAGGER_JSON: /app/docs/adc-api.yaml
      API_URL: ""
    volumes:
      - ../docs/adc-api.yaml:/app/docs/adc-api.yaml:ro
    networks:
      - adcf-network
    profiles:
      - documentation

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  dev_cache:
    driver: local
  dev_logs:
    driver: local
  zap_reports:
    driver: local
  pgadmin_data:
    driver: local

networks:
  adcf-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "adcf.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "adcf.labels" . | nindent 4 }}
  annotations:
    deployment.kubernetes.io/revision: "{{ .Release.Revision }}"
    uars.platform/component: "adcf"
    uars.platform/version: "{{ .Chart.AppVersion }}"
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      {{- include "adcf.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.pod.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "adcf.selectorLabels" . | nindent 8 }}
        {{- with .Values.pod.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "adcf.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.global.securityContext | nindent 8 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        # Wait for database to be ready
        - name: wait-for-db
          image: postgres:16-alpine
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; do
                echo "Waiting for database to be ready..."
                sleep 2
              done
              echo "Database is ready!"
          env:
            {{- range .Values.env }}
            {{- if or (eq .name "DB_HOST") (eq .name "DB_PORT") (eq .name "DB_USER") }}
            - name: {{ .name }}
              {{- if .value }}
              value: {{ .value | quote }}
              {{- else if .valueFrom }}
              valueFrom:
                {{- toYaml .valueFrom | nindent 16 }}
              {{- end }}
            {{- end }}
            {{- end }}
          securityContext:
            {{- toYaml .Values.pod.securityContext | nindent 12 }}
        
        # Run database migrations
        - name: migrate
          image: "{{ .Values.global.imageRegistry }}/{{ .Values.migration.image.repository }}:{{ .Values.migration.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /app/migrate
            - up
          env:
            {{- range .Values.env }}
            - name: {{ .name }}
              {{- if .value }}
              value: {{ .value | quote }}
              {{- else if .valueFrom }}
              valueFrom:
                {{- toYaml .valueFrom | nindent 16 }}
              {{- end }}
            {{- end }}
          securityContext:
            {{- toYaml .Values.pod.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.migration.resources | nindent 12 }}
      
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.pod.securityContext | nindent 12 }}
          image: "{{ .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            {{- range .Values.env }}
            - name: {{ .name }}
              {{- if .value }}
              value: {{ .value | quote }}
              {{- else if .valueFrom }}
              valueFrom:
                {{- toYaml .valueFrom | nindent 16 }}
              {{- end }}
            {{- end }}
            # Additional runtime environment variables
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          
          {{- with .Values.startupProbe }}
          startupProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          
          volumeMounts:
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            # Additional volume mounts for security
            - name: proc
              mountPath: /proc
              readOnly: true
            - name: sys
              mountPath: /sys
              readOnly: true
        
        # Sidecar: Log aggregator
        - name: log-aggregator
          image: fluent/fluent-bit:2.1
          imagePullPolicy: IfNotPresent
          env:
            - name: FLUENT_CONF
              value: fluent-bit.conf
            - name: FLUENT_OPT
              value: ""
          volumeMounts:
            - name: fluent-bit-config
              mountPath: /fluent-bit/etc
              readOnly: true
            - name: tmp
              mountPath: /tmp
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            {{- toYaml .Values.pod.securityContext | nindent 12 }}
        
        # Sidecar: Security scanner
        - name: security-scanner
          image: "{{ .Values.global.imageRegistry }}/uars/security-scanner:latest"
          imagePullPolicy: IfNotPresent
          command:
            - /app/scanner
            - --mode=sidecar
            - --target=localhost:8080
          env:
            - name: SCAN_INTERVAL
              value: "300s"
            - name: REPORT_ENDPOINT
              value: "https://security.uars.platform/api/reports"
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            {{- toYaml .Values.pod.securityContext | nindent 12 }}
      
      volumes:
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        # Additional security volumes
        - name: proc
          hostPath:
            path: /proc
            type: Directory
        - name: sys
          hostPath:
            path: /sys
            type: Directory
        - name: fluent-bit-config
          configMap:
            name: {{ include "adcf.fullname" . }}-fluent-bit
      
      # DNS configuration for zero-trust networking
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "2"
          - name: edns0
      
      # Termination grace period for graceful shutdown
      terminationGracePeriodSeconds: 30
      
      # Host network and PID namespace isolation
      hostNetwork: false
      hostPID: false
      hostIPC: false
      
      # Share process namespace for debugging
      shareProcessNamespace: false
      
      # Priority class for scheduling
      priorityClassName: system-cluster-critical
